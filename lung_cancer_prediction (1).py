# -*- coding: utf-8 -*-
"""LUNG CANCER PREDICTION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZbIOGCMWvM7rH_fxcDyG7EAqSjUNzSMe
"""

# Imports

from sklearn.ensemble import RandomForestClassifier
from imblearn.ensemble import BalancedRandomForestClassifier
from sklearn import svm
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

#Environment check
import os
import warnings
warnings.filterwarnings("ignore")

"""GET THE DATA"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import os
for dirname, _, filenames in os.walk('/content/survey lung cancer.csv'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

df = pd.read_csv('/content/survey lung cancer.csv')

df.info()

df.describe()

df.columns

df.head()

"""FEATURE ENGINEERING AND MAPPING"""

df['LUNG_CANCER']=df['LUNG_CANCER'].map({'YES':2,'NO':1})

df['GENDER']=df['GENDER'].map({'M':1,'F':2})

df.head()

df[df.duplicated()]

df.drop_duplicates()

"""SPLIT THE DATA"""

X = df.iloc[:,:-1]
y = df['LUNG_CANCER']

X.shape

y.shape

#Split the data into train and test set (approx 80/20)
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 42, test_size = 0.2, stratify = y)

"""SCALING DATA"""

from sklearn.preprocessing import MinMaxScaler

scale=MinMaxScaler()
X_train_scaled=pd.DataFrame(scale.fit_transform(X_train),columns=X_train.columns)
X_train_scaled

X_test_scaled = pd.DataFrame(scale.fit_transform(X_test),columns=X_test.columns)
X_test_scaled

"""RANDOM FOREST CLASSIFICATION"""

# Model 1
model_1 = RandomForestClassifier()

# Fit
model_1.fit(X_train, y_train)

from sklearn.metrics import mean_absolute_error

# Get predictions
predictions_1 = model_1.predict(X_test)

# Calculate MAE
mae_1 = mean_absolute_error(predictions_1 ,y_test )

print("Mean Absolute Error with  Random Forest classifier:" , mae_1)

"""SUPPORT PROJECT VECTOR MACHINE"""

model_2 = svm.SVC()

# Fit
model_2.fit(X_train, y_train)

# Make predictions calculate mean absolute error

predictions_2 = model_2.predict(X_test)
mae_2 = mean_absolute_error(predictions_2, y_test)

print("Mean Absolute Error with Support Vector Machine: {:,.0f}".format(mae_2))

#Model 3
model_3 = KNeighborsClassifier(n_neighbors=5)

# Fit
model_3.fit(X_train, y_train)

# Make predictions calculate mean absolute error

predictions_3 = model_3.predict(X_test)
mae_3 = mean_absolute_error(predictions_3, y_test)

print("Mean Absolute Error with K nearest Neighbor classifier is : {:,.0f}".format(mae_3))

"""PREDICTIONS"""

print('Random Forest classifier Predictions - ', predictions_1)

print('Support Vector Machine classifier predictions - ', predictions_2)

print('K nearest neighbor classifier Predictions - ', predictions_3)

from sklearn.metrics import PrecisionRecallDisplay

display = PrecisionRecallDisplay.from_estimator(
    model_2, X_test, y_test, name="LinearSVC"
)
_ = display.ax_.set_title("Precision-Recall curve")

import sklearn

precision_score_1 = sklearn.metrics.precision_score(y_test, predictions_1, labels=model_1.classes_)
precision_score_2 = sklearn.metrics.precision_score(y_test, predictions_2, labels=model_2.classes_)
precision_score_3 = sklearn.metrics.precision_score(y_test, predictions_3, labels=model_3.classes_)

print("Precision score for Random Forest Classifier is  ", precision_score_1)

print("Precision score for Support Vector Machine classifier is  ", precision_score_2)

print("Precision score for K nearest neighbor classifier is  ", precision_score_3)

F1_model_1 = sklearn.metrics.f1_score(y_test, predictions_1, labels=model_1.classes_, pos_label=1, average='weighted', sample_weight=None)

F1_model_2 = sklearn.metrics.f1_score(y_test, predictions_2, labels=model_2.classes_, pos_label=1, average='weighted', sample_weight = None)

F1_model_3 = sklearn.metrics.f1_score(y_test, predictions_3, labels=model_3.classes_, pos_label=1, average='weighted', sample_weight = None)

print("F1 Score for Random Forest Classifier is ", F1_model_1)
print("F1 Score for Support Vector Machine classifier is ", F1_model_2)
print("F1 Score for K nearest neighbor classifier is ", F1_model_3)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.svm import SVC

#clf = SVC(random_state=0)
#clf.fit(X_train, y_train)

cm = confusion_matrix(y_test, predictions_2, labels=model_2.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm,
                              display_labels=model_2.classes_)
disp.plot()

"""ACCURACY CHECK"""

from sklearn import metrics

accuracy_1 = metrics.accuracy_score(y_test,predictions_1)
print('Accuracy for Random Forest classifier model is - ', accuracy_1)

accuracy_2 = metrics.accuracy_score(y_test,predictions_2)
print('Accuracy for Support Vector Machine classifier model is - ', accuracy_2)

accuracy_3 = metrics.accuracy_score(y_test,predictions_3)
print('Accuracy for K nearest neighbor classifier model is - ', accuracy_3)